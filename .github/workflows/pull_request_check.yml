name: Pull request checks

on:
  push:
    branches:
      - main
      - develop

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:

  quality-check: # Check that the codebase does not contain linting errors
    name: Quality check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9
      - name: Run pylint and export quality score
        run: |
          python -m pip install --upgrade pip
          pip install pylint pylint-exit pylint-gitlab anybadge
          mkdir -p docs/lint_results
          pylint tadkit --output-format=text --exit-zero | tee docs/lint_results/pylint.txt
          PYLINT_SCORE=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' docs/lint_results/pylint.txt)
          echo "Pylint score is $PYLINT_SCORE"
          pylint tadkit --output-format=pylint_gitlab.GitlabPagesHtmlReporter --exit-zero > docs/lint_results/index.html 
          anybadge --overwrite --label pylint --value=$PYLINT_SCORE --file=docs/lint_results/pylint.svg 4=red 6=orange 8=yellow 10=green
          if PYLINT_SCORE <8; then exit 1; fi
          
      - name: Run flake8 and export report
        run: |
          sudo apt-get update && sudo apt-get install -y libxml2-utils
          pip install flake8 flake8-html
          mkdir -p docs/flake8
          flake8 tadkit  --format=html --htmldir=docs/flake8 --exit-zero 
          SEVERITY=$(xmllint --html --xpath "//*[@id='masthead']" ./docs/flake8/index.html | awk -F 'class="|"/>' '{print $2}')
          if [ "$SEVERITY" = "sev-1" ]; then FLAKE8_COLOR="red"
          elif [ "$SEVERITY" = "sev-2" ]; then FLAKE8_COLOR="orange"
          elif [ "$SEVERITY" = "sev-3" ]; then FLAKE8_COLOR="yellow"
          else FLAKE8_COLOR="green"; fi
          anybadge --overwrite --label flake8 --value="report" --file=docs/flake8/flake8.svg --color $FLAKE8_COLOR
          
    
  # python-tests: # Install dependencies and run tests with pytest
    # name: Python tests
    # needs:
      # [quality-check]
    # runs-on: ubuntu-latest

    # strategy:
      # matrix:
        # python-version: ["3.9"]

    # steps:
      # - uses: actions/checkout@v3
      # - name: Set up Python ${{ matrix.python-version }}
        # uses: actions/setup-python@v4
        # with:
          # python-version: ${{ matrix.python-version }}
      # - name: Install dependencies
        # run: |
          # python -m pip install --upgrade pip
          # pip install .
          # pip install pytest coverage
      # - name: Test with pytest
        # run: |
         # coverage run -m pytest tests
         # coverage report > coverage_report.txt
         # mkdir -p docs/coverage  
         # COVERAGE_SCORE=$(grep 'TOTAL' coverage_report.txt | awk '{print $4}' | sed 's/%//')
         # echo "Coverage score is $COVERAGE_SCORE"
         # anybadge --overwrite --label coverage --value=$COVERAGE_SCORE --file=docs/coverage/coverage.svg 50=red 60=orange 75=yellow 100=green
         # coverage html -d docs/coverage

#  docker-build-check: # Build the docker image and check that it can run
#    name: Docker build check
#    needs:
#      [black-format-check, prettier-check, cspell-check, version-upgrade-check]
#    runs-on: ubuntu-latest
#    if: contains(github.ref, "develop")
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1
#      - name: Build the Docker image
#        run: |
#          docker build -t neuralde .
#      - name: Run the Docker image
#        run: |
#          docker run --rm neuralde python main.py
